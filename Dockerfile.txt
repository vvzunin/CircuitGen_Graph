# Используем официальный образ Ubuntu как базовый
FROM ubuntu:22.04

# Устанавливаем необходимые инструменты и зависимости
RUN apt-get update && apt-get install -y \
build-essential \
clang \
clang-tidy \
clang-format-15 \
cmake \
python3 \
python3-pip \
lcov \
git \
&& apt-get clean

# Устанавливаем Python-зависимости
RUN pip3 install codespell

# Создаем рабочую директорию
WORKDIR /app

# Копируем содержимое репозитория в контейнер
COPY . .

# Создаем файл CMakeUserPresets.json с указанным содержимым
RUN echo '{ \
"version": 2, \
"cmakeMinimumRequired": { \
"major": 3, \
"minor": 14, \
"patch": 0 \
}, \
"configurePresets": [ \
{ \
"name": "dev", \
"binaryDir": "${sourceDir}/build/dev", \
"inherits": ["dev-mode", "ci-linux"], \
"cacheVariables": { \
"CMAKE_BUILD_TYPE": "Debug" \
} \
} \
], \
"buildPresets": [ \
{ \
"name": "dev", \
"configurePreset": "dev", \
"configuration": "Debug" \
} \
], \
"testPresets": [ \
{ \
"name": "dev", \
"configurePreset": "dev", \
"configuration": "Debug", \
"output": { \
"outputOnFailure": true \
} \
} \
] \
}' > /app/CMakeUserPresets.json

# Делаем скрипт сборки исполняемым
RUN chmod +x buildGraph.sh

# Указываем команду по умолчанию
CMD ["./buildGraph.sh"]